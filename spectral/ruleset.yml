aliases:
  OperationObject:
    - '#PathItemObject[get,put,post,delete,options,head,patch,trace]'
  PathItemObject:
    - $.paths[*]
functions:
  - ensurePropertiesExample
  - ensureAllArraysHaveItemTypes
  - ensureSnakeCaseWithDigits
  - validateOperationIdNaming
  - ensureCommonHttpMethods
  - ensure4xxAnd5xxUseErrorBody
  - ensureISOFormat
  - ensureCommonHttpCodes
  - ensureMeaningfulParameterNames
  - ensureParametersUseRef
  - ensureWrappedResponses
rules:
  array-params-must-have-items-with-type:
    description: Array parameters must have an items attribute with a type.
    given: $..*.parameters[*]
    message: '{{error}}'
    severity: error
    then:
      function: ensureAllArraysHaveItemTypes
  array-properties-must-have-items-with-type:
    description: Array properties must have an items attribute with a type.
    given: $..*.properties[*]
    message: '{{error}}'
    severity: error
    then:
      function: ensureAllArraysHaveItemTypes
  component-parameters-must-be-camel-case:
    description: Component parameters must be camelCase.
    given: $.components.parameters[?(@.in in ['path', 'query'])].name
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
  component-parameters-must-have-meaningful-names:
    description: >-
      Meaningful parameter names must be used in the form of {entity}Id,
      {entity}Description, {entity}Timestamp
    given: $.components.parameters[?(@.in in ['path', 'query'])].name
    message: '{{error}}. {{description}}'
    severity: error
    then:
      function: ensureMeaningfulParameterNames
  component-parameters-must-include-examples:
    description: Parameters must include examples.
    given: $.components.parameters.*
    message: '{{description}}; missing {{property}}.'
    severity: error
    then:
      function: xor
      functionOptions:
        properties:
          - example
          - examples
  component-schema-declarations-must-define-examples:
    description: Every component schema declaration must define at least one example.
    given: $.components.schemas[*]
    message: '{{description}}; Data type object is lacking an example {{path}}.'
    severity: error
    then:
      - function: xor
        functionOptions:
          properties:
            - example
            - examples
  component-schema-enum-properties-must-be-upper-snake-case:
    description: >-
      Enums must be all uppercase with underscores and must not end in an
      underscore.
    given: $.components.schemas..properties..enum[*]
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: macro
  component-schema-keys-must-be-pascal-case:
    description: schema key must be PascalCase.
    given: $.components['schemas'].*~
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: pascal
    type: style
  component-schema-parameters-must-be-camel-case:
    description: Schema parameters must be camelCase.
    given: $.components.schemas[*].required[*]
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
  component-schema-parameters-must-have-meaningful-description-names:
    description: >-
      Meaningful schema description must be used in the form of
      {entity}Description. For example - customerDescription, userDescription.
    given: $.components.schemas..required[?(@ == 'description')]
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Description$
  component-schema-parameters-must-have-meaningful-id-names:
    description: >-
      Meaningful schema Ids must be used in the form of {entity}Id. For example
      - customerId, betterCloudUserId
    given: $.components.schemas..required[?(@ == 'id')]
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Id$
  component-schema-parameters-must-have-meaningful-timestamp-names:
    description: >-
      Meaningful schema timestamps must be used in the form of
      {entity}Timestamp. For example - createdTimestamp, updatedTimestamp
    given: $.components.schemas..required[?(@ == 'timestamp')]
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Timestamp$
  component-schema-parameters-must-have-meaningful-value-names:
    description: >-
      Meaningful schema values must be used in the form of {entity}Value. For
      example - customerValue, displayValue
    given: $.components.schemas..required[?(@ == 'value')]
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Value$
  component-schema-properties-must-be-camel-case:
    description: component schema properties must be camelCase.
    given: $.components.schemas[*].properties.*~
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+[a-zA-Z0-9]*$
  component-schema-time-parameters-must-use-iso8601:
    description: Time must be represented using ISO8601
    given: $.components.schemas..properties
    message: '{{error}}'
    severity: error
    then:
      function: ensureISOFormat
  component-schemas-must-be-used:
    description: >-
      Data object types must be used to specify the schema (data types) of a
      request response.
    given: $.components.schemas
    message: '{{description}}; property {{property}} is missing.'
    severity: error
    then:
      - function: length
        functionOptions:
          min: 1
  headers-must-include-examples:
    description: Headers must include examples.
    given: $.paths[*].*.responses.*.headers[*]
    message: '{{description}}; missing {{property}}.'
    severity: error
    then:
      - function: xor
        functionOptions:
          properties:
            - example
            - examples
  oas-files-must-have-contact-info:
    description: Every API must have a contact containing name and email.
    given: $.info.contact
    message: '{{description}}; property {{property}} is missing.'
    severity: error
    then:
      - field: name
        function: truthy
      - field: email
        function: truthy
  oas-files-must-have-global-description:
    description: Every API must have a global description
    given: $.info
    message: >-
      OpenAPI object info `description` must be present and at least 100
      characters long.
    severity: error
    then:
      - field: description
        function: truthy
      - field: description
        function: length
        functionOptions:
          min: 100
  oas-files-must-have-title-starting-with-bettercloud:
    description: >-
      OAS Title must begin with "BetterCloud's". For example - BetterCloud's
      Automation API
    given: $.info.title
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^BetterCloud's
  oas-files-must-use-version-3.0.x:
    description: >-
      OAS files must adhere to an openapi version of 3.0.x. All other versions
      are not authorized.
    given: $.openapi
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^(3\.)(0\.)(\d+)$
  operation-ids-must-be-camel-case:
    description: >-
      The operationId tags must be camelCase since some generators (sucha as RTK
      Query) don't support kebab-cases.
    given: '#OperationObject'
    message: >-
      Operation ID "{{value}}" must be camelCase since some generators (such as
      RTK Query) don't support kebab-cases.
    severity: error
    then:
      field: operationId
      function: casing
      functionOptions:
        type: camel
  operationids-must-follow-naming-conventions:
    description: The operationId tags must follow naming conventions for method.
    given: $.paths[*]
    message: '{{error}}'
    severity: error
    then:
      function: validateOperationIdNaming
    type: style
  path-actions-must-have-descriptions-and-summaries:
    description: Every route of an API must have a description.
    given: $.paths[*][get,patch,post,put,delete]
    message: '{{description}}; property: {{property}} is missing.'
    severity: error
    then:
      - field: description
        function: truthy
      - field: summary
        function: truthy
  path-http-actions-must-be-limited:
    description: http actions must be limited to get, put, post, delete, and patch
    given: $.paths[*].[*]~
    message: '{{error}}'
    severity: error
    then:
      function: ensureCommonHttpMethods
  path-parameters-must-use-ref:
    description: Query and Path parameters must use $ref for their schemas.
    given: $.paths.[*][get,post,put,delete].parameters[*]
    message: '{{description}}; {{property}} incorrect.'
    resolved: false
    severity: error
    then:
      function: ensureParametersUseRef
  path-request-body-schemas-must-use-ref:
    description: Endpoints with request bodies must use $ref for their schemas.
    given: >-
      $.paths.[*][get,post,put,delete].requestBody.content.application/json.schema
    message: '{{description}}; {{property}} incorrect.'
    resolved: false
    severity: error
    then:
      - field: $ref
        function: truthy
  path-response-body-schemas-must-use-ref:
    description: Response bodies no matter the response must use ref for their schemas.
    given: >-
      $.paths.[*][get,post,put,delete].responses[*].content.application/json.schema
    message: '{{description}}; {{property}} is incorrect.'
    resolved: false
    severity: error
    then:
      - field: $ref
        function: truthy
  path-responses-must-use-error-object-schema-for-errors:
    description: >-
      When responding with a 4xx or 5xx, you must add and use the approved error
      response in the response schema
    given: >-
      $.paths[*].[*].responses["400","401","403","404","429","500"].content['application/json']
    message: '{{error}}'
    resolved: false
    severity: error
    then:
      function: ensure4xxAnd5xxUseErrorBody
  path-responses-must-use-qualified-status-codes:
    description: You must only use allowed http response codes
    given: $.paths[*].[*].responses[*]~
    message: '{{error}}'
    severity: error
    then:
      function: ensureCommonHttpCodes
  paths-must-be-kebab-case:
    description: All YAML/JSON paths must be kebab-case.
    given: $.paths[*]~
    message: '{{property}} is not kebab-case: {{error}}.'
    recommended: true
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^/([a-z0-9]+(-[a-z0-9]+)*)?(/[a-z0-9]+(-[a-z0-9]+)*|/{.+})*$
  paths-must-have-descriptions:
    description: Every route of an API must have a description.
    given: $.paths[*]
    message: '{{description}}; property: {{property}} is missing.'
    severity: error
    then:
      - field: description
        function: truthy
  paths-must-not-use-http-verbs-in-name:
    description: >-
      The HTTP Verbs must not be used in the route path to define different
      actions on a resource.
    given: $.paths[?(!@property.match(/well-known/ig))]~
    message: >-
      {{description}}; {{property}} Instead use HTTP verbs to define actions on
      a resource. Example: PUT /digital-twin/api/v1/products/42
    severity: error
    then:
      function: pattern
      functionOptions:
        notMatch: \/(get|post|put|patch|delete)(\/|$)
  paths-must-specify-tags:
    description: Every route must specify at least one tag it belongs to.
    given: $.paths[?(!@property.match(/well-known/ig))].*
    message: '{{description}}; property tags is missing at: {{path}}.'
    severity: error
    then:
      - field: tags
        function: truthy
      - field: tags
        function: length
        functionOptions:
          min: 1
  response-parameters-must-be-camel-case:
    description: Response parameters must be camelCase.
    given: $.paths..responses..content[*].parameters[*].name
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
  response-parameters-must-have-meaningful-description-names:
    description: >-
      Meaningful response parameter timestamps must be used in the form of
      {entity}Description. For example - customerDescription, userDescription
    given: >-
      $.paths[*]..responses[*].content[*].example.content[*].parameters[?(@.name
      in ['description'])].name
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Description$
  response-parameters-must-have-meaningful-id-names:
    description: >-
      Meaningful response parameter ids must be used in the form of {entity}Id.
      For example - customerId, betterCloudUserId
    given: >-
      $.paths[*]..responses[*].content[*].example.content[*].parameters[?(@.name
      in ['id'])].name
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Id$
  response-parameters-must-have-meaningful-timestamp-names:
    description: >-
      Meaningful response parameter timestamps must be used in the form of
      {entity}Timestamp. For example - createdTimestamp, updatedTimestamp
    given: >-
      $.paths[*]..responses[*].content[*].example.content[*].parameters[?(@.name
      in ['timestamp'])].name
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Timestamp$
  response-parameters-must-have-meaningful-value-names:
    description: >-
      Meaningful response parameter values must be used in the form of
      {entity}Value. For example - customerValue, displayValue
    given: >-
      $.paths[*]..responses[*].content[*].example.content[*].parameters[?(@.name
      in ['value'])].name
    message: '{{description}}; property {{property}} is missing.'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Value$
  responses-must-be-wrapped:
    description: >-
      Your responses must be wrapped
    given: $.paths..responses[200,201,"200","201"].content.application/json
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - field: schema
        function: truthy
  responses-must-contain-common-response-200-or-201:
    description: >-
      Responses must contain at least one 200-level response. For example - 200,
      201
    given: $.paths..responses.*~
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - function: xor
        functionOptions:
          properties:
            - '200'
            - '201'
  responses-must-contain-common-response-400:
    description: Responses must contain common response - 400 (Bad Request)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - field: '400'
        function: truthy
  responses-must-contain-common-response-401:
    description: Responses must contain common response - 401 (Unauthorized)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - field: '401'
        function: truthy
  responses-must-contain-common-response-403:
    description: Responses must contain common response - 403 (Forbidden)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - field: '403'
        function: truthy
  responses-must-contain-common-response-404:
    description: Responses must contain common response - 404 (Not found)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - field: '404'
        function: truthy
  responses-must-contain-common-response-406:
    description: Responses must contain common response - 406 (Not Acceptable)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - field: '406'
        function: truthy
  responses-must-contain-common-response-415-for-post-and-put:
    description: Responses must contain common response - 415 (Unsupported Media)
    given: $.paths..["post","put"].responses
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - field: '415'
        function: truthy
  responses-must-contain-common-response-429:
    description: Responses must contain common response - 429 (Too many requests)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}'
    severity: error
    then:
      - field: '429'
        function: truthy
  responses-must-contain-common-response-500:
    description: Responses must contain common response - 500 (Server error)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}.'
    severity: error
    then:
      - field: '500'
        function: truthy
  responses-must-include-ratelimit-headers:
    description: Response must include ratelimit-x headers.
    given: $.paths[*].*.responses.*.headers
    message: '{{description}}; missing {{property}}.'
    severity: error
    then:
      - field: X-Rate-Limit-ID
        function: truthy
      - field: X-Rate-Limit-Remaining
        function: truthy
      - field: X-Rate-Limit-Reset
        function: truthy
  responses-must-return-response-body-with-2xx:
    description: >-
      Every route returning a http status code of 200 or 201 must have a
      response body defined.
    given: >-
      $.paths[?(!@property.match(/well-known/ig))]..responses[200,201,"200","201"]
    message: '{{description}}; property {{property}} is missing at path: {{path}}.'
    severity: error
    then:
      - field: content
        function: truthy
      - field: description
        function: truthy
  responses-must-use-media-type-json-content-type:
    description: '''application/json'' is the only acceptable content type.'
    given: $.paths.*.*.responses.*.content
    severity: error
    then:
      field: application/json
      function: truthy
  servers-must-match-api-standards:
    description: Schema and host in URL must match company API standards.
    given: $.servers..url
    message: >-
      {{description}}; {{property}}:{{value}} incorrect. Example:
      https://api.bettercloud.com/automation/v1
    severity: error
    then:
      function: pattern
      functionOptions:
        match: >-
          ^((https:\/\/))([a-z-]+)([.]+)(([a-z]*)?)bettercloud.com\/([a-z-]{3,})\/v[1-9]+$
