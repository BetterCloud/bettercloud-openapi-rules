aliases:
  OperationObject:
    - '#PathItemObject[get,put,post,delete,options,head,patch,trace]'
  PathItemObject:
    - $.paths[*]
functions:
  - ensurePropertiesExample
  - ensureAllArraysHaveItemTypes
  - ensureSnakeCaseWithDigits
  - validateOperationIdNaming
rules:
  array-params-must-have-items-with-type:
    description: Array parameters must have an items attribute with a type
    given: $..*.parameters[*]
    message: '{{error}}'
    severity: error
    then:
      function: ensureAllArraysHaveItemTypes
  array-properties-must-have-items-with-type:
    description: Array properties must have an items attribute with a type
    given: $..*.properties[*]
    message: '{{error}}'
    severity: error
    then:
      function: ensureAllArraysHaveItemTypes
  body-properties-must-be-camel-case:
    description: Body properties MUST be camelCase
    given: $..properties.*~
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+[a-zA-Z0-9]*$
  dtos-must-define-example-schema:
    description: Every DTO must define at least one example
    given: $.paths[?(!@property.match(/well-known/ig))]..content.*
    message: '{{description}}; DTO is lacking an example {{path}}'
    severity: error
    then:
      - function: xor
        functionOptions:
          properties:
            - example
            - examples
  endpoint-refs-must-be-file:
    description: Endpoint must a $ref to a file in resources/
    given: $.paths.*.$ref
    message: '{{description}}; {{value}} incorrect'
    resolved: false
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^resources/.*yml$
  endpoints-must-be-ref:
    description: Endpoint must be a $ref
    given: $.paths.*.*
    message: '{{description}}; {{property}} incorrect'
    resolved: false
    severity: error
    then:
      - field: $ref
        function: truthy
  enums-must-be-upper-snake-case:
    description: >-
      Enums must be all uppercase with underscores and must not end in an
      underscore
    given: $.components.schemas..properties..enum[*]
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: macro
  example-keys-must-be-snake-case:
    description: example key must be snake case (e.g. snake_case)
    given: $.components['examples'].*~
    message: '{{error}}'
    severity: error
    then:
      function: ensureSnakeCaseWithDigits
    type: style
  headers-must-include-examples:
    description: Headers must include examples
    given: $..headers.*
    message: '{{description}}; missing {{property}}'
    severity: error
    then:
      function: ensurePropertiesExample
  oas-files-must-have-contact-info:
    description: Every API must have a contact containing name and email
    given: $.info.contact
    message: '{{description}}; property {{property}} is missing'
    severity: error
    then:
      - field: name
        function: truthy
      - field: email
        function: truthy
  oas-files-must-have-global-description:
    description: Every API must have a global description
    given: $.info
    message: >-
      OpenAPI object info `description` must be present and at least 100 chars
      long.
    severity: error
    then:
      - field: description
        function: truthy
      - field: description
        function: length
        functionOptions:
          min: 100
  oas-files-must-have-path:
    description: Every API must have at least one path
    given: $
    message: '{{description}}; property `paths` is empty'
    severity: error
    then:
      - field: paths
        function: length
        functionOptions:
          min: 1
  oas-files-must-have-title-starting-with-bettercloud:
    description: >-
      OAS Title must begin with "BetterCloud's" (i.e. BetterCloud's Automation
      API)
    given: $.info.title
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^BetterCloud's
  oas-files-must-use-version-3.0.x:
    description: >-
      OAS files must adhere to an openapi version of 3.0.x. All other versions
      are not authorized
    given: $.openapi
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^(3\.)(0\.)(\d+)$
  operation-ids-must-be-camel-case:
    description: >-
      Operation IDs must be camelCase since some generators (e.g. RTK Query)
      don't support kebab-cases.
    given: '#OperationObject'
    message: >-
      Operation ID "{{value}}" must be camelCase since some generators (e.g. RTK
      Query) don't support kebab-cases.
    severity: error
    then:
      field: operationId
      function: casing
      functionOptions:
        type: camel
  operationids-must-follow-naming-conventions:
    description: operationIds must follow naming conventions for method
    given: $.paths[*]
    message: '{{error}}'
    severity: error
    then:
      function: validateOperationIdNaming
    type: style
  parameter-keys-must-be-snake-case:
    description: parameter key must be snake case (e.g. snake_case)
    given: $.components['parameters'].*~
    message: '{{error}}'
    severity: error
    then:
      function: ensureSnakeCaseWithDigits
    type: style
  params-must-include-examples:
    description: Parameters must include examples
    given: $..parameters.*
    message: '{{description}}; missing {{property}}'
    severity: error
    then:
      function: xor
      functionOptions:
        properties:
          - example
          - examples
  path-parameters-must-be-camel-case:
    description: Path parameters must be camelCase
    given: $.paths..parameters[?(@.in in ['path', 'query'])].name
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
  path-parameters-must-have-meaningful-id-names:
    description: >-
      Meaningful path parameter ids must be used in the form of {entity}Id. ie
      customerId, betterCloudUserId
    given: $.paths..parameters[?(@.in in ['path', 'query'] && @.name in ['id'])].name
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Id$
  paths-must-be-kebab-case:
    description: All YAML/JSON paths MUST follow kebab-case
    given: $.paths[*]~
    message: '{{property}} is not kebab-case: {{error}}'
    recommended: true
    severity: warn
    then:
      function: pattern
      functionOptions:
        match: ^/([a-z0-9]+(-[a-z0-9]+)*)?(/[a-z0-9]+(-[a-z0-9]+)*|/{.+})*$
  paths-must-have-descriptions:
    description: Every route of an API should have a description
    given: $.paths[?(!@property.match(/well-known/ig))]
    message: '{{description}}; property: {{property}} is missing'
    severity: error
    then:
      - field: description
        function: truthy
  paths-must-not-use-http-verbs-in-name:
    description: >-
      The HTTP Verbs should not be used in the route path to define different
      actions on a resource
    given: $.paths[?(!@property.match(/well-known/ig))]~
    message: >-
      {{description}}; {{property}} Instead use HTTP verbs to define actions on
      a resource. Example: PUT - /digital-twin/api/v1/products/42
    severity: error
    then:
      function: pattern
      functionOptions:
        notMatch: \/(get|post|put|patch|delete)(\/|$)
  paths-must-return-response-body-with-2xx:
    description: >-
      Every route returning a http status code of 200 or 201 must have a
      response body defined
    given: >-
      $.paths[?(!@property.match(/well-known/ig))]..responses[200,201,"200","201"]
    message: '{{description}}; property {{property}} is missing at path: {{path}}'
    severity: error
    then:
      - field: content
        function: truthy
      - field: description
        function: truthy
  paths-must-specify-tags:
    description: Every route must specify at least one tag it belongs to
    given: $.paths[?(!@property.match(/well-known/ig))].*
    message: '{{description}}; property tags is missing at: {{path}}'
    severity: error
    then:
      - field: tags
        function: truthy
      - field: tags
        function: length
        functionOptions:
          min: 1
  properties-must-include-examples:
    description: Object properties must include examples
    given: $..properties..properties.*
    message: '{{error}}'
    severity: error
    then:
      function: ensurePropertiesExample
  response-keys-must-be-snake-case:
    description: response key must be snake case (e.g. snake_case)
    given: $.components['responses'].*~
    message: '{{error}}'
    severity: error
    then:
      function: ensureSnakeCaseWithDigits
    type: style
  response-parameters-must-be-camel-case:
    description: Response parameters must be camelCase
    given: $.paths..responses..content[*].parameters[*].name
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
  response-parameters-must-have-meaningful-id-names:
    description: >-
      Meaningful response parameter ids must be used in the form of {entity}Id.
      ie customerId, betterCloudUserId
    given: $.paths..responses..content[*].parameters[?(@.type == 'ID')].name
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Id$
  responses-must-contain-common-response-401:
    description: Responses should contain common response - 401 (unauthorized)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}'
    severity: error
    then:
      - field: '401'
        function: truthy
  responses-must-contain-common-response-404:
    description: Responses should contain common response - 404 (not found)
    given: $.paths[?(@property.match(/.*\/{.*}.*/))]..responses
    message: '{{description}}. Missing {{property}}'
    severity: error
    then:
      - field: '404'
        function: truthy
  responses-must-contain-common-response-429:
    description: Responses should contain common response - 429 (too many requests)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}'
    severity: error
    then:
      - field: '429'
        function: truthy
  responses-must-contain-common-response-500:
    description: Responses should contain common response - 500 (server error)
    given: $.paths..responses
    message: '{{description}}. Missing {{property}}'
    severity: error
    then:
      - field: '500'
        function: truthy
  responses-must-have-content-type:
    description: Every response must specify its content type
    given: $.paths[?(!@property.match(/well-known/ig))]..content
    message: >-
      {{description}}; property {{property}} is missing or not a valid
      content-type
    severity: error
    then:
      - field: '@key'
        function: truthy
      - field: '@key'
        function: pattern
        functionOptions:
          match: /
  responses-must-include-ratelimit-headers:
    description: Response must include ratelimit-x headers
    given: $..responses.*
    message: '{{description}}; missing {{property}}'
    severity: error
    then:
      - field: headers.ratelimit-limit
        function: truthy
      - field: headers.ratelimit-remaining
        function: truthy
      - field: headers.ratelimit-reset
        function: truthy
  responses-must-use-media-type-json-content-type:
    description: application/json is the only acceptable content type
    given: $.paths.*.*.responses.*.content
    severity: error
    then:
      field: application/json
      function: truthy
  schema-keys-must-be-pascal-case:
    description: schema key must be pascal case (e.g. PascalCase)
    given: $.components['schemas'].*~
    message: '{{error}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: pascal
    type: style
  schema-parameters-must-be-camel-case:
    description: Schema parameters must be camelCase
    given: $.components.schemas..required[*]
    message: '{{description}}'
    severity: error
    then:
      function: casing
      functionOptions:
        type: camel
  schema-parameters-must-have-meaningful-id-names:
    description: >-
      Meaningful schema ids must be used in the form of {entity}Id. ie
      customerId, betterCloudUserId
    given: $.components.schemas..required[?(@ == 'id')]
    message: '{{description}}'
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[a-z]+((\d)|([A-Z0-9][a-z0-9]+))*([A-Z])?Id$
  schemas-must-use-dtos:
    description: >-
      DTOs should be used to specify the schema(data types) of a request /
      response
    given: $.components.schemas
    message: '{{description}}; property {{property}} is missing'
    severity: error
    then:
      - function: length
        functionOptions:
          min: 1
  servers-must-match-api-standards:
    description: Schema and host in URL must match company API standards
    given: $.servers..url
    message: >-
      {{description}}; {{property}}:{{value}} incorrect. Example:
      https://api.bettercloud.com/automation/v1
    resolved: false
    severity: error
    then:
      function: pattern
      functionOptions:
        match: >-
          ^((https):\/\/)([a-z-]+)([.]+)([a-z]?)bettercloud.com\/[a-z-]+\/v[1-9]+$
